%
% 
% Apparently there is an undocumented line smoothing property...
% http://undocumentedmatlab.com/blog/plot-linesmoothing-property/
% 
% GRAPH class for graphics object.
%   gr = graph(); constructs a graphics object.
% 
% Methods:
% 
% plot( gr, sim, measure, varargin )
%     Determines the appropriate plot type based on the current simulation.
%     Prepares and sends in the data to the appropriate plot type.
%     
% set_options( gr, options )
%     Sets the target properties of the current plot.
%         
% plot_scatter( gr, x, y, varargin )
%     Generates a scatterplot of points (x and y).
% 
% plot_histogram( gr, x,y, xtheory, ytheory, varargin )
%     Generates a probability histogram of measure x.
%     
% plot_line( gr, x, y, varargin )
%     Generates a line plot of mean values of measure y at each step of 
%     measure x.
% 
% plot_heat( gr, x, y, z, varargin )
%     Generates a heatmap of mean values of measure z for each level of 
%     measures x and y.
% 
% plot_contour( gr, x,y,z, varargin )
%     Generates a contour plot of mean values of measure z for each level  
%     of measures x and y.
% 
% plot_surface( gr, x,y,z, varargin )
%     Generates a heatmap of mean values of measure z for each level of 
%     measures x and y.
% 
% compatible = compatible_plots(gr,sim)
%     Identifies which plot types are available given the current
%     simulation. Returns a vector of logicals specifying which plots 
%     can be created with data generated by the current simulation.
%     
% lims = get_limits(gr, x, factor)
%     Determines x- and y-axis limits for generated plots.
%     Returns a vector specifying the min and max to plot on each axis.
%     
% 
% See also: simulate, interface

%   Copyright 2013
%   $Revision: 1.0 $  $Date: 2013/09/22 2:02:00 $





classdef graph < handle
    
    % -------------------------------------------------------------------
    properties (Constant)
        FontSize = 18;
        FontName = 'Arial';
        DeepSkyBlue  = [0 191 255] / 255;
        FireBrickRed = [178 34 34] / 255;
        
        PlotTypes = ...
            {
            'Histogram', 0
            'Scatter'  , 0
            'Line'     , 1
            'Heatmap'  , 2
            'Contour'  , 2
            'Surface'  , 2
            };
    end % constant properties
    
    properties (GetAccess = 'public', SetAccess = 'public')
        
        % handles.
        Figure
        Axes
        hFill      % handle for fill object
        hScatter   % handle for plot object
        hLine      % handle for line object
        hImage     % if you don't get the pattern by now...
        hText
        hLegend
        
        sample   % rows and cols into randomsamples at the time graph was drawn.
        interpolate = true; % interpolate to smooth heat and contour maps
        isInputGraph = false;
        isModifyInputGraph = false;
        
    end % private properties
    
    % -------------------------------------------------------------------
    % constructor and user actions should be public (naming_convention)
    methods (Access = public)
        
        % constructor...
        function gr = graph()
        end % interface func
        
        plot( gr, sim, measure, varargin )
        set_options( gr, options )
        
        plot_scatter( gr, x, y, varargin )
        plot_histogram( gr, x,y, xtheory, ytheory, varargin )
        plot_line( gr, x, y, varargin )
        plot_heat( gr, x, y, z, varargin )
        plot_contour( gr, x,y,z, varargin )
        plot_surface( gr, x,y,z, varargin )
        
        compatible = compatible_plots(gr,sim)
        lims = get_limits(gr, x, factor)
    end % public methods
    
    methods (Access=private)
        DataSelector(~, sim, measure, nSupport, nRequest)
    end % private methods
    
end %classdef